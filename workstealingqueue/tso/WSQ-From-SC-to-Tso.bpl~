

const ownerThread :TID;
const unique T:variable;
const unique H:variable;
const unique tasks : variable;
const unique NULL :int ;
const unique ABORT:int ;

// Auxiliary variables : version numbers 
var T_version:int;
var H_version:int;



procedure pop_head_ls_tail() returns (result: int)// pop1
{
  var local_tail: int;
  var local_tail_tmp:int ;
  var local_head: int;
  var tail_version:int;
    

    atomic{
	assume tid == ownerThread;
	call local_tail_tmp := read(T);
	local_tail := local_tail_tmp-1;
	call write(T,local_tail);
	
	tail_version := T_version; 
	tail_version := tail_version + 1;
	T_version := tail_version;
    }
	
    atomic{  
      assume tid == ownerThread;
      assert tail_version == T_version;
      assert local_tail == T.value;
      call local_head := read(H);
      assume local_head < local_tail; 
    }		  

    atomic  {  
      assume tid == ownerThread;
      assert tail_version == T_version;
      assert local_tail == T.value;
      call result := read_from_ptr(tasks, local_tail);
      assert result  > 0;
      assume local_head < local_tail;
      return;
    }
}

procedure pop_head_eq_tail_suc() returns (result: int) // pop2
{
  var local_tail: int;
  var local_tail_tmp:int ;
  var local_head: int;
  var tail_version:int;
  var head_version:int;
  var local_head_version:int;
  var tail_index_first:int;
  var tail_index_second:int;

  atomic{
	assume tid == ownerThread;
  	call local_tail_tmp := read(T);
  	local_tail := local_tail_tmp -1 ;

 	tail_version := T_version;
	tail_version := tail_version + 1;
	call tail_index_first := write(T, local_tail);
  	
	T_version := tail_version;
	
  }

  // D1 Action
  atomic{
	assume tid == ownerThread;
	if(*){call isAtHeadAndDrain(tail_index);}
  }
 atomic{
	assume tid == ownerThread;	
	assert tail_version == T_version;
	assert T.value == local_tail;
	call result := read_from_ptr(tasks, local_tail);
	
	//correctness specification
	assert result > 0;
 }
  // D1 Action
 atomic{
	assume tid == ownerThread;
	if(*){call isAtHeadAndDrain(tail_index);}
 }
 atomic{
	assume tid == ownerThread;
	assert tail_version == T_version;
	assert local_tail == T.value;
	assert result > 0;	
	call local_head := read(H);
	head_version := H_version;
	assume local_head == local_tail;	
	


 }

 atomic{
	assume tid == ownerThread;
	if(*){call isAtHeadAndDrain(tail_index);}

 }
  atomic  {
	assume local_head == local_tail;
	assume tid == ownerThread;
	assert result > 0;
	assert tail_version == T_version;
        assert local_tail == T.value;
	call tail_index_second:= write(T, local_head + 1);

  }

  atomic{
	assume local_head == local_tail;
	assume tid == ownerThread;
	if(*){call isAtHeadAndDrain();}
  }

  atomic{
	assume local_head == local_tail;
	assume tid == ownerThread;
	assert (tail_index_second==ThreadPool[ownerThread] ==>
	       T_version == tail_version &&
	       local_tail == T.value
	       );
	if(*){call isAtHeadAndDrain();}
 }

 atomic{
	assume IsBufferEmpty(ownerThread,ThreadPool);
	assume ownerThread == tid;
	assume local_head == H.value;
	assume H_version == head_version;
	local_head := local_head + 1;
	
	local_head_version := H_version;
	local_head_version := local_head_version + 1;
	H:= local_head;
	H_version := local_head_version;
	return;
 }

}

procedure pop_head_eq_tail_not_suc() returns (result: int)
{
  var local_tail:int;
  var local_tail_tmp:int ;
  var local_head:int;
  var tail_version:int;

atomic{
  assume tid == ownerThread;
  call local_tail_tmp := read(T);
  local_tail := local_tail_tmp -1 ;
  call write(T, local_tail);
  call drain_singleton();
  tail_version := T.ver;
}

  atomic  {
    assert local_tail == T.value;
    call result := read_from_ptr(tasks,local_tail);
  }

  atomic  {

    assert local_tail == T.value;
    call local_head := read(H);
    assume local_head == local_tail;
  }


  atomic  {  
     assert IsBufferEmpty(ownerThread, ThreadPool); // Is buffer empty ?
     assume local_head != H.value ;
     result := NULL;
     return;
  }
}
procedure pop_head_gt_tail() returns (result: int){

 var local_tail: int;
 var local_tail_tmp:int ;
 var local_head: int;
 var tail_version:int;

  atomic{
	assume tid == ownerThread;
	call local_tail_tmp := read(T);
	local_tail := local_tail_tmp -1 ;
	call write(T, local_tail);
	call drain_singleton(); 
	tail_version := T.ver;
	
  }

  atomic  {  
        assert local_tail == T.value;
        call local_head := read(H);
        assume local_tail < local_head; 
  }        
  


  atomic  {  
  	 assert local_tail == T.value;
     	 assert local_tail < local_head;
	 call write(T,local_head);
	 call drain_singleton();
  }

  atomic  {
          result := NULL;
  }

}


procedure steal_head_ls_tail_succ() returns (result: int)
{
  var local_tail: int;
  var local_head: int;
  var tsk : int;

    

	    assume tid != ownerThread;
		call local_head := read(H);
		call tsk := read_from_ptr(tasks, local_head); 

	

    atomic{
     // assert IsBufferEmpty(tid,ThreadPool);
	  assume tid != ownerThread;
          call write(H,local_head + 1);
          call drain_singleton();
		 
    }

    result := tsk;
}
procedure steal_head_ls_tail_succ_not()returns (result : int ){

	var local_tail: int;
	var local_head: int;
	var tsk : int;

	assume tid != ownerThread;
	call local_head := read(H);
	call tsk := read_from_ptr(tasks, local_head);   //
	    	  
//	 assert IsBufferEmpty(tid,ThreadPool);
	assume local_head != H.value;
	result := ABORT;

}


procedure steal_head_ge_tail() returns (result: int){
 
  var local_tail: int;
  var local_head: int;

  //havoc h; // abstracted from h := H;
  //havoc t; // abstracted from t := T;
  // skip; // abstracted from assume h >= t;
assume tid != ownerThread ;
  call local_tail := read(T);
  call local_head := read(H);
  assume local_head >= local_tail;
  result := NULL;
}
 
procedure put(x:int)
{
	var tail_index:int;
	  
	assume ownerThread == tid ;
	assume x > 0;

	call tail_index := read(T);
  	
	call write_to_ptr(tasks,tail_index, x);
	call drain_singleton();
	
	call write(T,tail_index + 1);
	call drain_singleton();
}
